plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13' // here // 0.0.10
    id 'org.beryx.jlink' version '2.25.0' // here // 2.24.1

}

group 'io.ourbatima'
version '1.0.4'

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'

    }
    maven {
        url "https://maven.google.com" // Nouveau repository
    }
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

ext {
    junitVersion = '5.8.2'
}

application {
    mainModule = 'io.ourbatima'
    mainClass = 'io.ourbatima.Starter'
    applicationDefaultJvmArgs = ["-Djava.library.path=" + projectDir.toString() + "/src/main/resources/libs"]
}


javafx {
    version = '18.0.2' // here 18
    modules = ['javafx.controls',
               'javafx.fxml',
               'javafx.web',
               'javafx.graphics',
               'javafx.media',
               "javafx.swing"]
}
configurations.all {
    resolutionStrategy {
        force 'org.eclipse.jetty:jetty-server:9.4.51.v20230217'
        force 'org.eclipse.jetty:jetty-servlet:9.4.51.v20230217'
        force 'com.google.code.gson:gson:2.10.1'

    }
}

dependencies {

    implementation 'org.yaml:snakeyaml:1.33'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation files('vendor/animatefx-1.2.0.jar')
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'mysql:mysql-connector-java:8.0.26'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.openpnp:opencv:4.5.5-1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    implementation 'com.sparkjava:spark-core:2.9.4'
    implementation 'com.stripe:stripe-java:28.4.0'

    implementation 'com.google.maps:google-maps-services:0.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.controlsfx:controlsfx:11.1.2'
        implementation("org.apache.pdfbox:pdfbox:2.0.30") // Version la plus récente



        // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // Mockito
    testImplementation 'org.mockito:mockito-core:4.0.0'

    // TestFX for JavaFX UI Testing
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'

    implementation 'org.openjfx:javafx-base:17.0.2'
    implementation 'org.openjfx:javafx-controls:17.0.2'
    implementation 'org.openjfx:javafx-fxml:17.0.2'
    implementation 'org.openjfx:javafx-graphics:17.0.2'


    implementation 'org.yaml:snakeyaml:1.33'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation files('vendor/animatefx-1.2.0.jar')
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'mysql:mysql-connector-java:8.0.26'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.google.code.gson:gson:2.10.1'

    implementation 'com.google.code.gson:gson:2.8.9'
    implementation('com.google.apis:google-api-services-oauth2:v2-rev20200213-1.32.1') {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    implementation 'com.google.oauth-client:google-oauth-client:1.34.1'
    implementation 'com.google.api-client:google-api-client:2.2.0'
    implementation 'com.google.http-client:google-http-client-jackson2:1.43.0'
    implementation 'com.google.http-client:google-http-client-gson:1.43.3'
    implementation 'org.openjfx:javafx-fxml:18.0.2'
    implementation 'org.openjfx:javafx-controls:18.0.2'

    implementation 'org.openjfx:javafx-web:18.0.2'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'io.agora:agora-rtm:2.2.2'
    implementation 'io.agora.rtc:full-sdk:3.6.2' // SDK principal
    implementation fileTree(dir: 'src/main/resources/libs', include: ['*.jar'])






    // Dépendance corrigée pour LocalServerReceiver
    implementation('com.google.oauth-client:google-oauth-client-jetty:1.34.1') {
        exclude group: 'org.eclipse.jetty', module: 'jetty-server'
        exclude group: 'org.eclipse.jetty', module: 'jetty-servlet'

    }
    implementation 'org.eclipse.jetty:jetty-server:9.4.51.v20230217'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.51.v20230217'
    implementation 'org.eclipse.jetty:jetty-util:9.4.51.v20230217'

    // Gestion des conflits de versions
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.microsoft.azure:msal4j:1.11.0'

    implementation 'org.kordamp.ikonli:ikonli-material-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-core:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'

    implementation 'fr.brouillard.oss:cssfx:11.5.1' // Special lib to vizualize css when app is running.. so amazing!


    implementation files('vendor/GNAvatarView-1.0.5.jar')



//    implementation 'org.commonmark:commonmark:0.20.0'
//    implementation files('vendor/GNControls-1.2.5.jar')

// Here only for tests

//    implementation files('vendor/gndecorator-2.2.31.jar')     // Decorator lib for custom windows

    implementation files('vendor/scenicView.jar')          // thta's scenic view using jfx 8.. i need to updgrade.. this is essential for view all nodes in process
//    implementation files('vendor/controlsfx-8.40.17.jar') // My favorite lib.. has a lot of functionality

//    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

//test {
//    useJUnitPlatform()
//}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'DashboardFx'
    }

    jpackage {
        installerType = 'exe'
        installerOptions += '--verbose'
        installerOptions = [
                '--description', "Projeto Dashboard Fx.",
                '--vendor', 'Gleidson Neves da Silveira',
                '--copyright', 'Copyrigth © 2021-2023 GLEIDSON NEVES DA SILVEIRA'
//                'win-console', 'true'
//                , '--icon', 'logoT.ico'

        ]
        addExtraDependencies("javafx")
    }
}

jlinkZip {
    group = 'distribution'
}

//jlink {
//    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
//    launcher {
//        name = 'DashboardFx'
//    }
//
//    jpackage {
//
////        imageOptions = [
////                '--icon', 'logo_128.png'
////        ]
//        installerType = 'exe'
//        installerOptions = [
//                '--description', "Projeto Dashboard Fx.",
//                '--copyright', 'Copyrigth © 2021-2022 GLEIDSON NEVES DA SILVEIRA'
////                , '--icon', 'logoT.ico'
//
//        ]
//
//        addExtraDependencies("javafx")
//    }
//}


//jar {
//
////    duplicatesStrategy = DuplicatesStrategy.WARN
//    setDuplicatesStrategy(DuplicatesStrategy.WARN)
//
//    manifest {
//        attributes(
//                'Main-Class': 'io.ourbatima.Starter'
//        )
//    }
//    from {
//        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}

task runWithExecJarExecutable(type: Exec) {
    dependsOn jar
    group = "io.ourbatima"
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", jar.archiveFile.get()
}
task copyOpenCVLib(type: Copy) {
    from 'src/main/resources/libs'
    into "$buildDir/libs"
}
processResources.dependsOn copyOpenCVLib